package api

import (
	"fmt"
	"github.com/vince15dk/k8s-operator-ingress/pkg/data/scheme"
	"k8s.io/client-go/kubernetes"
	"log"
	"net/http"
)

const (
	baseUrl = "https://api-dnsplus.cloud.toast.com/dnsplus/v1.0/appkeys"
)

type DnsHandler struct {
	Client    kubernetes.Interface
	ListHosts map[int]string
}

func (d *DnsHandler) CreateDnsPlusZone(namespace string) {
	// generate secret struct from k8s secret
	s, err := generateSecret(d.Client, namespace)
	if err != nil {
		log.Printf("error %s", err.Error())
		return
	}
	// generate header for POST
	h := generateHeader(&http.Header{})

	// Create DnsPlus
	url := fmt.Sprintf("%s/%s/%s", baseUrl, s.AppKey, "zones")

	for _, host := range d.ListHosts {
		zone := scheme.DnsZone{
			Zone: scheme.Zone{
				ZoneName:    host,
				Description: fmt.Sprintf("%s generated by k8s api", host),
			},
		}
		_, err := PostHandlerFunc(url, zone, h)
		if err != nil {
			log.Printf("error %s", err.Error())
			return
		}
	}
}

//func (d *DnsHandler) DeleteDnsPlusZone()

//
//}
